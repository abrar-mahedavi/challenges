package main

import (
	"fmt"
	"testing"
)

func TestMessageFromBinaryCodeSingle(t *testing.T) {
	ans := messageFromBinaryCode([][]int{{1,2,1},
                                  {2,2,2},
                                  {2,2,2},
                                  {1,2,3},
                                  {2,2,1}})
	if ans != 9 {
		t.Errorf("messageFromBinaryCode([][]int{{1,2,1},{2,2,2},{2,2,2},{1,2,3},{2,2,1}})) = %v; want 6", ans)
	}
}

func TestMessageFromBinaryCodeTableDriven(t *testing.T) {
	var tests = []struct {
				a    string
    		want string
	}{
		{"010010000110010101101100011011000110111100100001", "Hello!"},
    {"01001101011000010111100100100000011101000110100001100101001000000100011001101111011100100110001101100101001000000110001001100101001000000111011101101001011101000110100000100000011110010110111101110101", "May the Force be with you"},
    {"010110010110111101110101001000000110100001100001011001000010000001101101011001010010000001100001011101000010000001100000011010000110010101101100011011000110111100101110", "You had me at `hello."},
    {"010001010110110001100101011011010110010101101110011101000110000101110010011110010010110000100000011011010111100100100000011001000110010101100001011100100010000001010111011000010111010001110011011011110110111000100001", "Elementary, my dear Watson!"},
    {"010011000110111101110110011001010010000001000110011011110111001000100000010000010110110001101100001011000010000001001000011000010111010001110010011001010110010000100000010001100110111101110010001000000100111001101111011011100110010100101110", "Love For All, Hatred For None."},
    {"0100001101101000011000010110111001100111011001010010000001110100011010000110010100100000011101110110111101110010011011000110010000100000011000100111100100100000011000100110010101101001011011100110011100100000011110010110111101110101011100100111001101100101011011000110011000101110", "Change the world by being yourself."},
    {"01000101011101100110010101110010011110010010000001101101011011110110110101100101011011100111010000100000011010010111001100100000011000010010000001100110011100100110010101110011011010000010000001100010011001010110011101101001011011100110111001101001011011100110011100101110", "Every moment is a fresh beginning."},
    {"010011100110010101110110011001010111001000100000011100100110010101100111011100100110010101110100001000000110000101101110011110010111010001101000011010010110111001100111001000000111010001101000011000010111010000100000011011010110000101100100011001010010000001111001011011110111010100100000011100110110110101101001011011000110010100101110","Never regret anything that made you smile."},
    {"010001000110100101100101001000000111011101101001011101000110100000100000011011010110010101101101011011110111001001101001011001010111001100101100001000000110111001101111011101000010000001100100011100100110010101100001011011010111001100101110","Die with memories, not dreams."},
    {"0100000101110011011100000110100101110010011001010010000001110100011011110010000001101001011011100111001101110000011010010111001001100101001000000110001001100101011001100110111101110010011001010010000001110111011001010010000001100101011110000111000001101001011100100110010100101110","Aspire to inspire before we expire."},
	}
	for _, tt := range tests {
		testname := fmt.Sprintf("%v ", tt.a)
		t.Run(testname, func(t *testing.T) {
			ans := messageFromBinaryCode(tt.a)
			if ans != tt.want {
				t.Errorf("got %d, want %d", ans, tt.want)
			}
		})
	}
}
